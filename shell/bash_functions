#!/bin/bash

# Easier manipulations
# ====================================================

function mcd() { mkdir -p "$1" && cd "$1"; }    # mcd:   Makes new Dir and jumps inside
function trash() { command mv "$@" ~/.Trash ; } # trash: Moves a file to the macOS trash

# Git
# ====================================================

function gpp() { git pull && git push; }        # gpp:   Git pull & push

# Docker
# ====================================================

function restore-volume() {
    tarName=$2
    if [[ "$2" = "" ]]
    then
        tarName=$1
    fi
    docker run --rm -ti -v $1:/data -v `pwd`:/host debian bash -c "cd /data; tar xvzf /host/$tarName.tgz"
}

function dump-volume() {
    tarName=$2
    if [[ "$2" = "" ]]
    then
        tarName=$1
    fi
    docker run --rm -ti -v $1:/data -v `pwd`:/host debian bash -c "cd /data; tar cvzf /host/$tarName.tgz *"
}

# Extract archives - use: extract <file>
# ====================================================

function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
        local foldername="${filename%%.*}"
        local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
        local didfolderexist=false
        if [ -d "$foldername" ]; then
            didfolderexist=true
            read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                return
            fi
        fi
        mkdir -p "$foldername" && cd "$foldername"
        case $1 in
        *.tar.bz2) tar xjf "$fullpath" ;;
        *.tar.gz) tar xzf "$fullpath" ;;
        *.tar.xz) tar Jxvf "$fullpath" ;;
        *.tar.Z) tar xzf "$fullpath" ;;
        *.tar) tar xf "$fullpath" ;;
        *.taz) tar xzf "$fullpath" ;;
        *.tb2) tar xjf "$fullpath" ;;
        *.tbz) tar xjf "$fullpath" ;;
        *.tbz2) tar xjf "$fullpath" ;;
        *.tgz) tar xzf "$fullpath" ;;
        *.txz) tar Jxvf "$fullpath" ;;
        *.zip) unzip "$fullpath" ;;
        *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Utils
# ====================================================

function localip() {
    function _localip() { echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
    export -f _localip
    local purple="\x1B\[35m" reset="\x1B\[m"
    networksetup -listallhardwareports | \
        sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
        sed -r "s/Device: (en.*)$/_localip \1/e" | \
        sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
        sed -r "s/(VLAN Configurations)|==*//g"
}

function trustssl () {
    echo "Please fill the domain: (example: website.com)"
    read hostname
    openssl s_client -connect $hostname:443 -showcerts -prexit < /dev/null > /tmp/certificate.cer
    sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/certificate.cer
}
export trustssl
